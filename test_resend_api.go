package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"
)

func main() {
	apiKey := os.Getenv("RESEND_API_KEY")
	fromEmail := os.Getenv("RESEND_FROM_EMAIL")

	fmt.Printf("üîë API Key: %s...\n", getFirstChars(apiKey, 10))
	fmt.Printf("üìß From Email: %s\n", fromEmail)

	if apiKey == "" {
		fmt.Println("‚ùå RESEND_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		return
	}

	// Prepare email
	emailReq := map[string]interface{}{
		"from":    "Auth Service <" + fromEmail + ">",
		"to":      []string{"prihodin816@gmail.com"},
		"subject": "–¢–µ—Å—Ç Resend API - –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã",
		"html":    `<div style="font-family: Arial, sans-serif;"><h2 style="color: #1890ff;">–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã</h2><h3>–¢–µ—Å—Ç Resend API</h3><p><strong>–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—Ö—É–π —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã! üöÄ</strong></p><p>–ï—Å–ª–∏ —Ç—ã —ç—Ç–æ –≤–∏–¥–∏—à—å - –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!</p></div>`,
		"text":    "–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã\n–¢–µ—Å—Ç Resend API\n–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—Ö—É–π —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã! üöÄ\n–ï—Å–ª–∏ —Ç—ã —ç—Ç–æ –≤–∏–¥–∏—à—å - –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!",
	}

	jsonData, _ := json.Marshal(emailReq)

	// Send request
	req, _ := http.NewRequest("POST", "https://api.resend.com/emails", bytes.NewBuffer(jsonData))
	req.Header.Set("Authorization", "Bearer "+apiKey)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{Timeout: 30 * time.Second}
	fmt.Println("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ Resend API...")

	resp, err := client.Do(req)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
		return
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)
	fmt.Printf("üìä Status: %d\n", resp.StatusCode)
	fmt.Printf("üì® Response: %s\n", string(body))

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—è–π –ø–æ—á—Ç—É prihodin816@gmail.com!")
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
	}
}

func getFirstChars(s string, n int) string {
	if len(s) <= n {
		return s
	}
	return s[:n] + "..."
}
