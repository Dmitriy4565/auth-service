#!/usr/bin/env python3
import paramiko
import os

def deploy_to_server():
    print("üöÄ –î–µ–ø–ª–æ–∏–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        ssh.connect('77.110.105.228', username='root', password='WFdYPuq0Dyef')
        sftp = ssh.open_sftp()
        
        print("üì§ –ó–∞–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        
        def upload_file(local_path, remote_path):
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
            try:
                sftp.put(local_path, remote_path)
                print(f"‚úÖ {local_path} -> {remote_path}")
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {local_path}: {e}")
                return False
        
        def upload_folder(local_folder, remote_folder):
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–ø–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
            for root, dirs, files in os.walk(local_folder):
                for file in files:
                    local_path = os.path.join(root, file)
                    relative_path = os.path.relpath(local_path, local_folder)
                    remote_path = f"{remote_folder}/{relative_path}"
                    remote_dir = os.path.dirname(remote_path)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    try:
                        sftp.stat(remote_dir)
                    except:
                        ssh.exec_command(f"mkdir -p '{remote_dir}'")
                    
                    upload_file(local_path, remote_path)
        
        # –ó–∞–ª–∏–≤–∞–µ–º –ø–∞–ø–∫–∏
        folders = ['cmd', 'internal', 'migrations', 'pkg']
        for folder in folders:
            if os.path.exists(folder):
                print(f"üìÅ –ó–∞–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É: {folder}")
                upload_folder(folder, f"/opt/auth-service/{folder}")
        
        # –ó–∞–ª–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        files = ['go.mod', 'go.sum', 'docker-compose.yml', 'Dockerfile', '.env']
        for file in files:
            if os.path.exists(file):
                print(f"üìÑ –ó–∞–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª: {file}")
                upload_file(file, f"/opt/auth-service/{file}")
        
        print("üê≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        
        commands = [
            'cd /opt/auth-service',
            'echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."',
            'docker compose down',
            'echo "üî® –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑..."',
            'docker compose up -d --build',
            'echo "‚è≥ –ñ–¥–µ–º 20 —Å–µ–∫—É–Ω–¥..."',
            'sleep 20',
            'echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"',
            'docker compose ps',
            'echo "üìù –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"',
            'docker compose logs auth-service --tail=15'
        ]
        
        for cmd in commands:
            print(f"‚ñ∂Ô∏è  –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
            stdin, stdout, stderr = ssh.exec_command(cmd, timeout=60)
            output = stdout.read().decode()
            error = stderr.read().decode()
            if output:
                print(f"üìã {output}")
            if error and "WARNING" not in error:
                print(f"‚ö†Ô∏è  {error}")
        
        print("üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üåê API –¥–æ—Å—Ç—É–ø–Ω–æ: http://77.110.105.228:8080")
        print("üìß –ü–∏—Å—å–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å SMTP")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        ssh.close()

if __name__ == "__main__":
    deploy_to_server()