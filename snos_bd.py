#!/usr/bin/env python3
import paramiko

def snos_bd():
    print("üóëÔ∏è  –ó–ê–ü–£–°–ö–ê–ï–ú –û–ß–ò–°–¢–ö–£ –ë–ê–ó –î–ê–ù–ù–´–•...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        ssh.connect('77.110.105.228', username='root', password='WFdYPuq0Dyef')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ë–î
        cleanup_commands = [
            'cd /opt/auth-service && docker compose exec -T postgres psql -U postgres -c "DROP DATABASE IF EXISTS auth_service;"',
            'cd /opt/auth-service && docker compose exec -T postgres psql -U postgres -c "CREATE DATABASE auth_service;"',
            'cd /opt/auth-service && docker compose exec -T postgres psql -U postgres -d auth_service -f /tmp/migrations/001_init.sql',
            'cd /opt/auth-service && docker compose exec -T postgres psql -U postgres -d auth_service -f /tmp/migrations/002_add_reset_password_tokens.sql',
            'cd /opt/auth-service && docker compose exec -T postgres psql -U postgres -d auth_service -c "\dt"'
        ]
        
        for cmd in cleanup_commands:
            print(f"üßπ {cmd}")
            stdin, stdout, stderr = ssh.exec_command(cmd)
            output = stdout.read().decode()
            error = stderr.read().decode()
            if output:
                print(f"üìã {output.strip()}")
            if error:
                print(f"‚ö†Ô∏è  {error.strip()}")
        
        print("‚úÖ –ë–ê–ó–´ –î–ê–ù–ù–´–• –û–ß–ò–©–ï–ù–´ –ò –ü–ï–†–ï–°–û–ó–î–ê–ù–´!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        ssh.close()

if __name__ == "__main__":
    snos_bd()