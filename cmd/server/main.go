package main

import (
	"auth-service/internal/config"
	"auth-service/internal/handlers"
	"auth-service/internal/middleware"
	"auth-service/internal/repository"
	"auth-service/internal/service"
	"auth-service/pkg/database"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := config.Load()
	log.Printf("üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: –ë–î=%s, –ü–æ—Ä—Ç=%s", cfg.DBName, cfg.Port)

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := database.NewPostgresDB(
		cfg.DBHost,
		cfg.DBPort,
		cfg.DBUser,
		cfg.DBPassword,
		cfg.DBName,
	)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	userRepo := repository.NewUserRepository(db)
	authService := service.NewAuthService(userRepo)
	authHandler := handlers.NewAuthHandler(authService)

	// –°–æ–∑–¥–∞–µ–º Gin —Ä–æ—É—Ç–µ—Ä
	router := gin.Default()

	// CORS middleware –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
	router.Use(func(c *gin.Context) {
		allowedOrigins := strings.Split(os.Getenv("CORS_ALLOW_ORIGINS"), ",")
		origin := c.Request.Header.Get("Origin")

		for _, allowedOrigin := range allowedOrigins {
			if origin == allowedOrigin {
				c.Header("Access-Control-Allow-Origin", origin)
				c.Header("Access-Control-Allow-Credentials", "true")
				c.Header("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With")
				c.Header("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
				break
			}
		}

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	})

	// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–∏–¥–ª–≤–∞—Ä–∏
	router.Use(gin.Logger())
	router.Use(gin.Recovery())

	// –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	auth := router.Group("/auth")
	{
		auth.POST("/register", authHandler.Register)
		auth.POST("/login", authHandler.Login)
		auth.POST("/verify-email", authHandler.VerifyEmail)
		auth.GET("/refresh", authHandler.Refresh)
		auth.POST("/logout", authHandler.Logout)
		auth.POST("/requestToResetPassword", authHandler.RequestResetPassword)
		auth.POST("/resetPassword", authHandler.ResetPassword)
	}

	// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
	protected := router.Group("/auth")
	protected.Use(middleware.AuthMiddleware())
	{
		protected.GET("/profile", authHandler.Profile)
	}

	// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
	router.GET("/health", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"status":    "ok",
			"service":   "auth-service",
			"timestamp": "2024-01-01T00:00:00Z",
		})
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	log.Printf("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", cfg.Port)
	log.Printf("üìö API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ http://localhost:%s", cfg.Port)
	log.Printf("üåê CORS —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è: %s", os.Getenv("CORS_ALLOW_ORIGINS"))

	if err := router.Run(":" + cfg.Port); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}

	// üî• –¢–ï–°–¢–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –ë–ï–ó –í–°–Ø–ö–û–ô –õ–û–ì–ò–ö–ò
	router.GET("/test-cookies", func(c *gin.Context) {
		fmt.Println("üîç –¢–ï–°–¢: /test-cookies –≤—ã–∑–≤–∞–Ω")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∫—É–∫–∏
		cookies := c.Request.Cookies()
		fmt.Printf("üîç –¢–ï–°–¢: –í—Ö–æ–¥—è—â–∏–µ –∫—É–∫–∏: %v\n", cookies)

		// –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
		c.JSON(200, gin.H{
			"message":     "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π endpoint",
			"has_cookies": len(cookies) > 0,
		})
	})

	router.POST("/test-register", func(c *gin.Context) {
		fmt.Println("üîç –¢–ï–°–¢: /test-register –≤—ã–∑–≤–∞–Ω")

		// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫—É–∫–∏
		c.SetCookie("access_token", "", -1, "/", "", false, true)
		c.SetCookie("refresh_token", "", -1, "/", "", false, true)
		c.SetCookie("session", "", -1, "/", "", false, true)

		c.JSON(200, gin.H{
			"message": "–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –∫—É–∫–∏ –æ—á–∏—â–µ–Ω—ã",
		})
	})
}
