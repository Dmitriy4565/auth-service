#!/usr/bin/env python3
import paramiko
import os
import tarfile

def safe_deploy():
    print("üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ë–ï–ó–û–ü–ê–°–ù–´–ô –î–ï–ü–õ–û–ô...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        ssh.connect('77.110.105.228', username='root', password='WFdYPuq0Dyef')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å
        print("‚è∏Ô∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å...")
        stop_commands = [
            'cd /opt/auth-service && docker compose down 2>/dev/null || true',
            'sleep 5'
        ]
        
        for cmd in stop_commands:
            print(f"‚èπÔ∏è  {cmd}")
            ssh.exec_command(cmd)
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞
        print("üì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
        with tarfile.open('project.tar.gz', 'w:gz') as tar:
            for item in ['.env', 'docker-compose.yml', 'Dockerfile', 'cmd', 'internal', 'migrations', 'pkg', 'go.mod', 'go.sum']:
                if os.path.exists(item):
                    tar.add(item)
                    print(f"üìÅ –î–æ–±–∞–≤–ª–µ–Ω: {item}")
        
        # –ó–∞–ª–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        print("üì§ –ó–∞–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        sftp = ssh.open_sftp()
        sftp.put('project.tar.gz', '/tmp/project.tar.gz')
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥–∏
        config_files = {
            '.env': 'üìÑ .env —Ñ–∞–π–ª',
            'docker-compose.yml': 'üê≥ docker-compose.yml', 
            'Dockerfile': 'üêπ Dockerfile'
        }
        
        for file, desc in config_files.items():
            if os.path.exists(file):
                print(f"{desc}...")
                sftp.put(file, f'/tmp/{file}')
            else:
                print(f"‚ùå {file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –ü–†–û–ï–ö–¢
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç...")
        build_commands = [
            'mkdir -p /opt/auth-service',
            'cd /opt/auth-service && tar -xzf /tmp/project.tar.gz --overwrite',
            'cp /tmp/.env /opt/auth-service/.env',
            'cp /tmp/docker-compose.yml /opt/auth-service/docker-compose.yml', 
            'cp /tmp/Dockerfile /opt/auth-service/Dockerfile',
            'cd /opt/auth-service && docker compose up -d --build',
            'sleep 15',
            'cd /opt/auth-service && docker compose ps'
        ]
        
        for cmd in build_commands:
            print(f"üî® {cmd}")
            stdin, stdout, stderr = ssh.exec_command(cmd)
            output = stdout.read().decode()
            error = stderr.read().decode()
            if output:
                print(f"üìã {output.strip()}")
            if error and not any(x in error for x in ['orphan', 'warning']):
                print(f"‚ö†Ô∏è  {error.strip()}")
        
        # –ó–ê–ü–£–°–ö–ê–ï–ú –ú–ò–ì–†–ê–¶–ò–ò
        print("üóÑÔ∏è  –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î...")
        migration_commands = [
            'sleep 10',
            'cd /opt/auth-service && docker compose cp migrations/ postgres:/tmp/',
            'cd /opt/auth-service && docker compose exec -T postgres psql -U postgres -d auth_service -f /tmp/migrations/001_init.sql',
            'cd /opt/auth-service && docker compose exec -T postgres psql -U postgres -d auth_service -f /tmp/migrations/002_add_reset_password_tokens.sql',
            'cd /opt/auth-service && docker compose exec -T postgres psql -U postgres -d auth_service -c "\dt"'
        ]
        
        for cmd in migration_commands:
            print(f"üìä {cmd}")
            stdin, stdout, stderr = ssh.exec_command(cmd)
            output = stdout.read().decode()
            if output:
                print(f"üìã {output.strip()}")
        
        # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
        print("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        check_commands = [
            'cd /opt/auth-service && docker compose ps',
            'cd /opt/auth-service && curl -s http://localhost:8080/health || echo "Health check failed"',
            'cd /opt/auth-service && docker compose logs auth-service --tail=10'
        ]
        
        for cmd in check_commands:
            stdin, stdout, stderr = ssh.exec_command(cmd)
            result = stdout.read().decode().strip()
            if result:
                print(f"‚úÖ {result}")
        
        print("üéâ –î–ï–ü–õ–û–ô –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        print("üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://77.110.105.228:8080")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        ssh.close()
        if os.path.exists('project.tar.gz'):
            os.remove('project.tar.gz')

if __name__ == "__main__":
    safe_deploy()