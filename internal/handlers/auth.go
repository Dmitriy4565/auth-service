package handlers

import (
	"auth-service/internal/models"
	"auth-service/internal/service"
	"auth-service/internal/utils"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
)

type AuthHandler struct {
	authService *service.AuthService
}

func NewAuthHandler(authService *service.AuthService) *AuthHandler {
	return &AuthHandler{authService: authService}
}

// setTokenCookies —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç access –∏ refresh —Ç–æ–∫–µ–Ω—ã –≤ httpOnly –∫—É–∫–∏
func (h *AuthHandler) setTokenCookies(c *gin.Context, accessToken, refreshToken string) {
	// Access Token –∫—É–∫–∞ (15 –º–∏–Ω—É—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö API endpoints)
	c.SetCookie(
		"access_token",
		accessToken,
		15*60, // 15 –º–∏–Ω—É—Ç
		"/",
		"",
		true, // Secure (true –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
		true, // HttpOnly
	)

	// Refresh Token –∫—É–∫–∞ (7 –¥–Ω–µ–π, –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è refresh endpoint)
	c.SetCookie(
		"refresh_token",
		refreshToken,
		7*24*60*60, // 7 –¥–Ω–µ–π
		"/auth/refresh",
		"",
		true, // Secure
		true, // HttpOnly
	)
}

// clearTokenCookies –æ—á–∏—â–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ –∫—É–∫
func (h *AuthHandler) clearTokenCookies(c *gin.Context) {
	c.SetCookie("access_token", "", -1, "/", "", true, true)
	c.SetCookie("refresh_token", "", -1, "/auth/refresh", "", true, true)
}

func (h *AuthHandler) Register(c *gin.Context) {
	fmt.Println("üéØ –î–ï–ë–ê–ì: ===== REGISTER HANDLER START =====")

	var registerReq models.RegisterRequest
	if err := c.ShouldBindJSON(&registerReq); err != nil {
		fmt.Printf("‚ùå –î–ï–ë–ê–ì: Validation error: %v\n", err)
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: " + err.Error(),
		})
		return
	}

	fmt.Printf("üìß –î–ï–ë–ê–ì: Registering user: %s\n", registerReq.Email)

	response, err := h.authService.Register(&registerReq)
	if err != nil {
		fmt.Printf("‚ùå –î–ï–ë–ê–ì: Service error: %v\n", err)
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
	headers := c.Writer.Header()
	fmt.Printf("üìã –î–ï–ë–ê–ì: Response headers before send: %v\n", headers)

	fmt.Printf("‚úÖ –î–ï–ë–ê–ì: Registration successful, activated_link: %s\n", response.ActivatedLink)
	fmt.Println("üéØ –î–ï–ë–ê–ì: ===== REGISTER HANDLER END =====")

	c.JSON(http.StatusOK, response)
}

// Login –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AuthHandler) Login(c *gin.Context) {
	var loginReq models.LoginRequest

	if err := c.ShouldBindJSON(&loginReq); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: " + err.Error(),
		})
		return
	}

	response, err := h.authService.Login(&loginReq)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, response)
}

// // VerifyEmail –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (h *AuthHandler) VerifyEmail(c *gin.Context) {
	var req models.VerifyRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	response, err := h.authService.VerifyCode(&req)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// SameSite=None –Ω–æ –ë–ï–ó Secure
	c.SetSameSite(http.SameSiteNoneMode)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º access token –≤ httpOnly cookie
	c.SetCookie(
		"access_token",
		response.AccessToken,
		3600, // 1 —á–∞—Å
		"/",
		"",    // –¥–æ–º–µ–Ω
		false, // üî• Secure = false –¥–ª—è HTTP —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
		true,  // httpOnly
	)

	c.SetCookie(
		"refresh_token",
		response.RefreshToken,
		7*24*3600, // 7 –¥–Ω–µ–π
		"/",
		"",    // –¥–æ–º–µ–Ω
		false, // üî• Secure = false –¥–ª—è HTTP —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
		true,  // httpOnly
	)

	c.JSON(http.StatusOK, gin.H{
		"message": "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
	})
}

// Profile –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AuthHandler) Profile(c *gin.Context) {
	// –ü–æ–ª—É—á–∞–µ–º access token –∏–∑ cookie
	accessToken, err := c.Cookie("access_token")
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{
			"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
		})
		return
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	claims, err := utils.ValidateToken(accessToken)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{
			"error": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω",
		})
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	user, err := h.authService.GetUserByID(claims.UserID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
		})
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	profile := models.ProfileResponse{
		Name:     user.Name,
		Lastname: user.Lastname,
		Email:    user.Email,
	}

	c.JSON(http.StatusOK, profile)
}

// Refresh –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã
func (h *AuthHandler) Refresh(c *gin.Context) {
	refreshToken, err := c.Cookie("refresh_token")
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh token"})
		return
	}

	tokens, err := h.authService.RefreshTokens(refreshToken)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
		return
	}

	// üî• –°–¢–ê–í–ò–ú SameSite=None
	c.SetSameSite(http.SameSiteNoneMode)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π access token –≤ cookie
	c.SetCookie(
		"access_token",
		tokens.AccessToken,
		3600,
		"/",
		"",
		true, // üî• secure = true
		true,
	)

	c.SetCookie(
		"refresh_token",
		tokens.RefreshToken,
		7*24*3600,
		"/",
		"",
		true, // üî• secure = true
		true,
	)

	c.JSON(http.StatusOK, gin.H{
		"message": "–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
	})
}

// Logout –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AuthHandler) Logout(c *gin.Context) {
	// üî• –°–¢–ê–í–ò–ú SameSite=None
	c.SetSameSite(http.SameSiteNoneMode)

	// –û—á–∏—â–∞–µ–º access token cookie
	c.SetCookie(
		"access_token",
		"",
		-1,
		"/",
		"",
		true, // üî• secure = true
		true,
	)

	// –û—á–∏—â–∞–µ–º refresh token cookie
	c.SetCookie(
		"refresh_token",
		"",
		-1,
		"/",
		"",
		true, // üî• secure = true
		true,
	)

	c.JSON(http.StatusOK, gin.H{
		"message": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥",
	})
}

// RequestResetPassword –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
func (h *AuthHandler) RequestResetPassword(c *gin.Context) {
	var req models.RequestResetPasswordRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	response, err := h.authService.RequestResetPassword(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, response)
}

// ResetPassword –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
func (h *AuthHandler) ResetPassword(c *gin.Context) {
	var req models.ResetPasswordRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	response, err := h.authService.ResetPassword(&req)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, response)
}

// AuthMiddleware middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ access token
func (h *AuthHandler) AuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		// –ü–æ–ª—É—á–∞–µ–º access token –∏–∑ –∫—É–∫–∏
		accessToken, err := c.Cookie("access_token")
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
			})
			c.Abort()
			return
		}

		// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
		claims, err := utils.ValidateToken(accessToken)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω",
			})
			c.Abort()
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º userID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
		c.Set("userID", claims.UserID)
		c.Next()
	}
}
