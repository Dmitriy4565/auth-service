package service

import (
	"auth-service/internal/models"
	"auth-service/internal/repository"
	"auth-service/internal/utils"
	"errors"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AuthService struct {
	userRepo     *repository.UserRepository
	emailService *EmailService
}

func NewAuthService(userRepo *repository.UserRepository) *AuthService {
	return &AuthService{
		userRepo:     userRepo,
		emailService: NewEmailService(),
	}
}

// TokensResponse —Å–æ–¥–µ—Ä–∂–∏—Ç access –∏ refresh —Ç–æ–∫–µ–Ω—ã
type TokensResponse struct {
	AccessToken  string
	RefreshToken string
}

// Register —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (s *AuthService) Register(registerReq *models.RegisterRequest) (*models.RegisterResponse, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
	existingUser, _ := s.userRepo.GetUserByEmail(registerReq.Email)
	if existingUser != nil {
		return nil, errors.New("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	}

	// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
	hashedPassword, err := utils.HashPassword(registerReq.Password)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := &models.User{
		Name:         registerReq.Name,
		Lastname:     registerReq.Lastname,
		Email:        registerReq.Email,
		PasswordHash: hashedPassword,
		Role:         "user",
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if err := s.userRepo.CreateUser(user); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}

	// üî• –ì–ï–ù–ï–†–ò–†–£–ï–ú UUID –ò –ö–û–î
	verificationUUID := uuid.New().String()
	code, err := utils.GenerateTwoFactorCode()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
	session := &models.VerificationSession{
		UUID:      verificationUUID,
		Email:     user.Email,
		Code:      code,
		Operation: "register",
		ExpiresAt: time.Now().Add(10 * time.Minute),
	}

	if err := s.userRepo.CreateVerificationSession(session); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É
	if err := s.emailService.Send2FACode(user.Email, code); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: %w", err)
	}

	return &models.RegisterResponse{
		Message: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É",
		UUID:    verificationUUID, // üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UUID —Ñ—Ä–æ–Ω—Ç—É
	}, nil
}

// Login –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (s *AuthService) Login(loginReq *models.LoginRequest) (*models.LoginResponse, error) {
	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	user, err := s.userRepo.GetUserByEmail(loginReq.Email)
	if err != nil {
		return nil, errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
	if !utils.CheckPasswordHash(loginReq.Password, user.PasswordHash) {
		return nil, errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
	}

	// üî• –ì–ï–ù–ï–†–ò–†–£–ï–ú UUID –ò –ö–û–î
	verificationUUID := uuid.New().String()
	code, err := utils.GenerateTwoFactorCode()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
	session := &models.VerificationSession{
		UUID:      verificationUUID,
		Email:     user.Email,
		Code:      code,
		Operation: "login",
		ExpiresAt: time.Now().Add(10 * time.Minute),
	}

	if err := s.userRepo.CreateVerificationSession(session); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É
	if err := s.emailService.Send2FACode(user.Email, code); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: %w", err)
	}

	return &models.LoginResponse{
		Message: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É",
		UUID:    verificationUUID, // üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UUID —Ñ—Ä–æ–Ω—Ç—É
	}, nil
}

// VerifyCode –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø–æ UUID –∏ –≤—ã–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã
func (s *AuthService) VerifyCode(verifyReq *models.VerifyRequest) (*models.VerifyResponse, error) {
	// –ù–∞—Ö–æ–¥–∏–º –≤–∞–ª–∏–¥–Ω—É—é —Å–µ—Å—Å–∏—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
	session, err := s.userRepo.GetValidVerificationSession(verifyReq.UUID, verifyReq.Code)
	if err != nil {
		return nil, errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥")
	}

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–∑ —Å–µ—Å—Å–∏–∏
	user, err := s.userRepo.GetUserByEmail(session.Email)
	if err != nil {
		return nil, errors.New("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// üî• –í–ö–õ–Æ–ß–ê–ï–ú 2FA –ü–û–°–õ–ï –ü–ï–†–í–û–ô –£–°–ü–ï–®–ù–û–ô –ü–†–û–í–ï–†–ö–ò
	if !user.TwoFactorEnabled {
		user.TwoFactorEnabled = true
		user.TwoFactorVerified = true
		if err := s.userRepo.UpdateUser(user); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è 2FA: %w", err)
		}
	}

	// –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
	if err := s.userRepo.MarkVerificationSessionAsUsed(verifyReq.UUID); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: %w", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
	tokens, err := s.generateTokens(user)
	if err != nil {
		return nil, err
	}

	return &models.VerifyResponse{
		AccessToken:  tokens.AccessToken,
		RefreshToken: tokens.RefreshToken,
		User: &models.User{
			ID:                user.ID,
			Name:              user.Name,
			Lastname:          user.Lastname,
			Email:             user.Email,
			Role:              user.Role,
			TwoFactorEnabled:  user.TwoFactorEnabled,
			TwoFactorVerified: user.TwoFactorVerified,
			CreatedAt:         user.CreatedAt,
			UpdatedAt:         user.UpdatedAt,
		},
	}, nil
}

// GetUserByID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
func (s *AuthService) GetUserByID(userID uint) (*models.User, error) {
	return s.userRepo.GetUserByID(userID)
}

// RefreshTokens –æ–±–Ω–æ–≤–ª—è–µ—Ç access –∏ refresh —Ç–æ–∫–µ–Ω—ã
func (s *AuthService) RefreshTokens(refreshToken string) (*TokensResponse, error) {
	// –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
	session, err := s.userRepo.GetSessionByToken(refreshToken)
	if err != nil {
		return nil, errors.New("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π refresh token")
	}

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := s.userRepo.GetUserByID(session.UserID)
	if err != nil {
		return nil, errors.New("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
	if err := s.userRepo.DeleteSession(refreshToken); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %w", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
	return s.generateTokens(user)
}

// generateTokens —Å–æ–∑–¥–∞–µ—Ç access –∏ refresh tokens –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *AuthService) generateTokens(user *models.User) (*TokensResponse, error) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º access token
	accessToken, err := utils.GenerateToken(user.ID, user.Email, user.Role)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ access token: %w", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh token
	refreshToken, err := utils.GenerateRefreshToken()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ refresh token: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è refresh token (7 –¥–Ω–µ–π)
	session := &models.Session{
		UserID:       user.ID,
		RefreshToken: refreshToken,
		ExpiresAt:    time.Now().Add(7 * 24 * time.Hour),
	}

	if err := s.userRepo.CreateSession(session); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: %w", err)
	}

	// –í —Ñ–æ–Ω–µ –æ—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	go s.cleanupExpiredData()

	return &TokensResponse{
		AccessToken:  accessToken,
		RefreshToken: refreshToken,
	}, nil
}

// cleanupExpiredData –æ—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
func (s *AuthService) cleanupExpiredData() {
	s.userRepo.DeleteExpiredSessions()
	s.userRepo.DeleteExpiredTwoFactorCodes()
	s.userRepo.DeleteExpiredVerificationSessions()
}
