package service

import (
	"crypto/tls"
	"fmt"
	"net/smtp"
	"os"
	"strconv"
)

type EmailService struct {
	host     string
	port     string
	username string
	password string
	from     string
}

func NewEmailService() *EmailService {
	return &EmailService{
		host:     os.Getenv("SMTP_HOST"),
		port:     os.Getenv("SMTP_PORT"),
		username: os.Getenv("SMTP_USERNAME"),
		password: os.Getenv("SMTP_PASSWORD"),
		from:     os.Getenv("SMTP_FROM"),
	}
}

func (s *EmailService) Send2FACode(email, code string) error {
	fmt.Printf("üéØ –û–¢–ü–†–ê–í–ö–ê 2FA –ö–û–î–ê:\n")
	fmt.Printf("üìß –ö–æ–º—É: %s\n", email)
	fmt.Printf("üîê –ö–æ–¥: %s\n", code)
	fmt.Printf("‚öôÔ∏è SMTP: %s:%s\n", s.host, s.port)
	fmt.Printf("üë§ Auth: %s\n", s.username)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if s.host == "" || s.username == "" || s.password == "" {
		fmt.Printf("‚ùå SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!\n")
		fmt.Printf("   HOST: '%s'\n", s.host)
		fmt.Printf("   USER: '%s'\n", s.username)
		fmt.Printf("   PASS: '%s'\n", "***") // –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
		return fmt.Errorf("SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
	}

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	auth := smtp.PlainAuth("", s.username, s.password, s.host)

	port, err := strconv.Atoi(s.port)
	if err != nil || port == 0 {
		port = 587
		fmt.Printf("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %d\n", port)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	subject := "Subject: –ö–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\r\n"
	mime := "MIME-version: 1.0;\r\nContent-Type: text/html; charset=\"UTF-8\";\r\n\r\n"
	body := fmt.Sprintf(`
		<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
			<h2 style="color: #1890ff;">–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã</h2>
			<h3>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h3>
			<div style="font-size: 32px; font-weight: bold; color: #1890ff; text-align: center; margin: 20px 0; padding: 10px; background: #f5f5f5;">
				%s
			</div>
			<p><strong>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç</strong></p>
		</div>`, code)

	msg := []byte(subject + mime + body)

	// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
	fmt.Printf("üì§ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ...\n")

	// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏

	// –°–ø–æ—Å–æ–± 1: –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
	err = smtp.SendMail(s.host+":"+strconv.Itoa(port), auth, s.from, []string{email}, msg)
	if err != nil {
		fmt.Printf("‚ùå –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: %v\n", err)

		// –°–ø–æ—Å–æ–± 2: –° TLS
		fmt.Printf("üîÑ –ü—Ä–æ–±—É–µ–º —Å TLS...\n")
		err = s.sendWithTLS(email, msg, auth, port)
		if err != nil {
			fmt.Printf("‚ùå –°–ø–æ—Å–æ–± 2 —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: %v\n", err)
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email: %v", err)
		}
	}

	fmt.Printf("‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ %s\n", email)
	fmt.Printf("üì® –ö–æ–¥: %s\n", code)
	return nil
}

// sendWithTLS - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å —è–≤–Ω—ã–º TLS
func (s *EmailService) sendWithTLS(to string, msg []byte, auth smtp.Auth, port int) error {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
	client, err := smtp.Dial(s.host + ":" + strconv.Itoa(port))
	if err != nil {
		return err
	}
	defer client.Close()

	// STARTTLS
	if err = client.StartTLS(&tls.Config{ServerName: s.host}); err != nil {
		return err
	}

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	if err = client.Auth(auth); err != nil {
		return err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
	if err = client.Mail(s.from); err != nil {
		return err
	}
	if err = client.Rcpt(to); err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	w, err := client.Data()
	if err != nil {
		return err
	}
	_, err = w.Write(msg)
	if err != nil {
		return err
	}
	err = w.Close()
	if err != nil {
		return err
	}

	return client.Quit()
}

// SendResetPasswordEmail –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
func (s *EmailService) SendResetPasswordEmail(email, resetLink string) error {
	fmt.Printf("üéØ –û–¢–ü–†–ê–í–ö–ê –°–°–´–õ–ö–ò –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø:\n")
	fmt.Printf("üìß –ö–æ–º—É: %s\n", email)
	fmt.Printf("üîó –°—Å—ã–ª–∫–∞: %s\n", resetLink)

	// –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É
	fmt.Printf("üîë –¢–û–ö–ï–ù –î–õ–Ø –¢–ï–°–¢–ê: %s\n", resetLink)

	// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	fmt.Printf("‚úÖ (–†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø) –°—Å—ã–ª–∫–∞ –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å\n")
	return nil
}
