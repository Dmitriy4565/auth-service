package service

import (
	"crypto/tls"
	"fmt"
	"net/smtp"
	"os"
	"time"
)

type EmailService struct {
	host     string
	port     string
	username string
	password string
	from     string
}

func NewEmailService() *EmailService {
	return &EmailService{
		host:     os.Getenv("SMTP_HOST"),
		port:     os.Getenv("SMTP_PORT"),
		username: os.Getenv("SMTP_USERNAME"),
		password: os.Getenv("SMTP_PASSWORD"),
		from:     os.Getenv("SMTP_FROM"),
	}
}

func (s *EmailService) Send2FACode(email, code string) error {
	fmt.Printf("\nüéØ –û–¢–ü–†–ê–í–ö–ê 2FA –ö–û–î–ê –ß–ï–†–ï–ó YANDEX: %s -> %s\n", code, email)

	// –ó–ê–ü–£–°–ö–ê–ï–ú –í –û–¢–î–ï–õ–¨–ù–û–ô –ì–û–†–£–¢–ò–ù–ï - –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú –û–°–ù–û–í–ù–û–ô –ü–û–¢–û–ö
	go s.send2FACodeAsync(email, code)

	return nil // —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
}

func (s *EmailService) SendResetPasswordEmail(email, resetLink string) error {
	fmt.Printf("\nüîê –û–¢–ü–†–ê–í–ö–ê –°–°–´–õ–ö–ò –°–ë–†–û–°–ê –ß–ï–†–ï–ó YANDEX: %s -> %s\n", email, resetLink)

	// –¢–û–ñ–ï –í –û–¢–î–ï–õ–¨–ù–û–ô –ì–û–†–£–¢–ò–ù–ï
	go s.sendResetPasswordAsync(email, resetLink)

	return nil
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ñ–æ–Ω–µ)
func (s *EmailService) send2FACodeAsync(email, code string) {
	defer func() {
		if r := recover(); r != nil {
			fmt.Printf("‚ùå –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ 2FA: %v\n", r)
		}
	}()

	start := time.Now()
	fmt.Printf("üìß [YANDEX] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 2FA –∫–æ–¥ –Ω–∞ %s\n", email)

	// HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	htmlContent := fmt.Sprintf(`
		<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
			<h2 style="color: #1890ff;">–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã</h2>
			<h3>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h3>
			<div style="font-size: 32px; font-weight: bold; color: #1890ff; text-align: center; margin: 20px 0; padding: 10px; background: #f5f5f5;">
				%s
			</div>
			<p><strong>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç</strong></p>
			<p style="color: #666; font-size: 12px; margin-top: 20px;">
				–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
			</p>
		</div>`, code)

	err := s.sendEmailWithTimeout(
		email,
		"–ö–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã",
		htmlContent,
	)

	if err != nil {
		fmt.Printf("‚ùå [YANDEX] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 2FA –Ω–∞ %s: %v\n", email, err)
	} else {
		fmt.Printf("‚úÖ [YANDEX] –ü–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ %s –∑–∞ %v\n",
			code, email, time.Since(start))
	}
}

func (s *EmailService) sendResetPasswordAsync(email, resetLink string) {
	defer func() {
		if r := recover(); r != nil {
			fmt.Printf("‚ùå –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ reset: %v\n", r)
		}
	}()

	start := time.Now()
	fmt.Printf("üîê [YANDEX] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reset —Å—Å—ã–ª–∫—É –Ω–∞ %s\n", email)

	// HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	htmlContent := fmt.Sprintf(`
<html>
<body style="font-family: Arial, sans-serif;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd;">
        <h2 style="color: #1890ff;">–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã</h2>
        <h3>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h3>
        <p>–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:</p>
        <div style="text-align: center; margin: 30px 0;">
            <a href="%s" style="background-color: #1890ff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-size: 16px; display: inline-block;">
                –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </a>
        </div>
        <p><strong>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å.</strong></p>
        <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
        <hr>
        <p style="color: #666; font-size: 12px;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
    </div>
</body>
</html>`, resetLink)

	err := s.sendEmailWithTimeout(
		email,
		"–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã",
		htmlContent,
	)

	if err != nil {
		fmt.Printf("‚ùå [YANDEX] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ reset –Ω–∞ %s: %v\n", email, err)
	} else {
		fmt.Printf("‚úÖ [YANDEX] –°—Å—ã–ª–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ %s –∑–∞ %v\n",
			email, time.Since(start))
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
func (s *EmailService) sendEmailWithTimeout(to, subject, html string) error {
	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	result := make(chan error, 1)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		defer func() {
			if r := recover(); r != nil {
				result <- fmt.Errorf("panic: %v", r)
			}
		}()

		err := s.sendEmailSMTP(to, subject, html)
		result <- err
	}()

	// –ñ–¥–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º 15 —Å–µ–∫—É–Ω–¥
	select {
	case err := <-result:
		return err
	case <-time.After(15 * time.Second):
		return fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞")
	}
}

// –ë–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å SMTP
func (s *EmailService) sendEmailSMTP(to, subject, html string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if s.host == "" || s.username == "" || s.password == "" {
		return fmt.Errorf("SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
	}

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	auth := smtp.PlainAuth("", s.username, s.password, s.host)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	emailSubject := "Subject: " + subject + "\r\n"
	mime := "MIME-version: 1.0;\r\nContent-Type: text/html; charset=\"UTF-8\";\r\n\r\n"
	msg := []byte(emailSubject + mime + html)

	fmt.Printf("üì§ [YANDEX] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ %s:%s...\n", s.host, s.port)

	// –Ø–Ω–¥–µ–∫—Å —Ç—Ä–µ–±—É–µ—Ç TLS, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
	err := s.sendWithTLS(to, msg, auth)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å SMTP: %v", err)
	}

	fmt.Printf("‚úÖ [YANDEX] –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å SMTP\n")
	return nil
}

func (s *EmailService) sendWithTLS(to string, msg []byte, auth smtp.Auth) error {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
	client, err := smtp.Dial(s.host + ":" + s.port)
	if err != nil {
		return err
	}
	defer client.Close()

	// STARTTLS (–Ø–Ω–¥–µ–∫—Å —Ç—Ä–µ–±—É–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ)
	if err = client.StartTLS(&tls.Config{ServerName: s.host}); err != nil {
		return err
	}

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	if err = client.Auth(auth); err != nil {
		return err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
	if err = client.Mail(s.from); err != nil {
		return err
	}
	if err = client.Rcpt(to); err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	w, err := client.Data()
	if err != nil {
		return err
	}
	_, err = w.Write(msg)
	if err != nil {
		return err
	}
	err = w.Close()
	if err != nil {
		return err
	}

	return client.Quit()
}
