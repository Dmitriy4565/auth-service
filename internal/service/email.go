package service

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"
)

type EmailService struct {
	apiKey string
	from   string
	name   string
}

func NewEmailService() *EmailService {
	apiKey := os.Getenv("RESEND_API_KEY")
	fromEmail := os.Getenv("RESEND_FROM_EMAIL")
	fromName := os.Getenv("RESEND_FROM_NAME")

	if fromName == "" {
		fromName = "Auth Service"
	}

	fmt.Printf("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Resend:\n")
	fmt.Printf("   API Key: %s...\n", getFirstChars(apiKey, 10))
	fmt.Printf("   From Email: %s\n", fromEmail)
	fmt.Printf("   From Name: %s\n", fromName)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å—Ç—å
	if apiKey == "" {
		fmt.Printf("‚ùå RESEND_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n")
	}
	if fromEmail == "" {
		fmt.Printf("‚ùå RESEND_FROM_EMAIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n")
	}

	return &EmailService{
		apiKey: apiKey,
		from:   fromEmail,
		name:   fromName,
	}
}

func (s *EmailService) Send2FACode(email, code string) error {
	fmt.Printf("\nüéØ –û–¢–ü–†–ê–í–ö–ê 2FA –ö–û–î–ê: %s -> %s\n", code, email)
	fmt.Printf("   From: %s <%s>\n", s.name, s.from)

	// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –¥–µ–±–∞–≥–∞
	return s.send2FACodeSync(email, code)
}

func (s *EmailService) SendResetPasswordEmail(email, resetLink string) error {
	fmt.Printf("\nüîê –û–¢–ü–†–ê–í–ö–ê –°–°–´–õ–ö–ò –°–ë–†–û–°–ê: %s -> %s\n", email, resetLink)
	fmt.Printf("   From: %s <%s>\n", s.name, s.from)

	// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –¥–µ–±–∞–≥–∞
	return s.sendResetPasswordSync(email, resetLink)
}

func (s *EmailService) send2FACodeSync(email, code string) error {
	start := time.Now()
	fmt.Printf("üìß [RESEND] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 2FA –∫–æ–¥ –Ω–∞ %s\n", email)

	htmlContent := fmt.Sprintf(`
		<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
			<h2 style="color: #1890ff;">–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã</h2>
			<h3>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h3>
			<div style="font-size: 32px; font-weight: bold; color: #1890ff; text-align: center; margin: 20px 0; padding: 10px; background: #f5f5f5;">
				%s
			</div>
			<p><strong>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç</strong></p>
			<p style="color: #666; font-size: 12px; margin-top: 20px;">
				–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
			</p>
		</div>`, code)

	plainTextContent := fmt.Sprintf(
		"–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã\n–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %s\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç",
		code,
	)

	err := s.sendEmailResend(
		email,
		"–ö–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã",
		htmlContent,
		plainTextContent,
	)

	if err != nil {
		fmt.Printf("‚ùå [RESEND] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 2FA –Ω–∞ %s: %v\n", email, err)
		return err
	} else {
		fmt.Printf("‚úÖ [RESEND] –ü–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ %s –∑–∞ %v\n",
			code, email, time.Since(start))
		return nil
	}
}

func (s *EmailService) sendResetPasswordSync(email, resetLink string) error {
	start := time.Now()
	fmt.Printf("üîê [RESEND] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reset —Å—Å—ã–ª–∫—É –Ω–∞ %s\n", email)

	htmlContent := fmt.Sprintf(`
<html>
<body style="font-family: Arial, sans-serif;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd;">
        <h2 style="color: #1890ff;">–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã</h2>
        <h3>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h3>
        <p>–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:</p>
        <div style="text-align: center; margin: 30px 0;">
            <a href="%s" style="background-color: #1890ff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-size: 16px; display: inline-block;">
                –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </a>
        </div>
        <p><strong>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å.</strong></p>
        <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
        <hr>
        <p style="color: #666; font-size: 12px;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
    </div>
</body>
</html>`, resetLink)

	plainTextContent := fmt.Sprintf(
		"–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã\n–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è\n–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: %s\n–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å.",
		resetLink,
	)

	err := s.sendEmailResend(
		email,
		"–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ü—Ä–æ–µ–∫—Ç—ã",
		htmlContent,
		plainTextContent,
	)

	if err != nil {
		fmt.Printf("‚ùå [RESEND] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ reset –Ω–∞ %s: %v\n", email, err)
		return err
	} else {
		fmt.Printf("‚úÖ [RESEND] –°—Å—ã–ª–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ %s –∑–∞ %v\n",
			email, time.Since(start))
		return nil
	}
}

// Resend API —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
type ResendEmailRequest struct {
	From    string   `json:"from"`
	To      []string `json:"to"`
	Subject string   `json:"subject"`
	Html    string   `json:"html"`
	Text    string   `json:"text"`
}

type ResendEmailResponse struct {
	Id string `json:"id"`
}

func (s *EmailService) sendEmailResend(to, subject, html, text string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if s.apiKey == "" {
		return fmt.Errorf("RESEND_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	if s.from == "" {
		return fmt.Errorf("RESEND_FROM_EMAIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º from –ø–æ–ª–µ
	fromField := s.name + " <" + s.from + ">"
	fmt.Printf("üì® [RESEND] From –ø–æ–ª–µ: %s\n", fromField)
	fmt.Printf("üì® [RESEND] To: %s\n", to)
	fmt.Printf("üì® [RESEND] Subject: %s\n", subject)

	// Prepare request
	emailReq := ResendEmailRequest{
		From:    fromField,
		To:      []string{to},
		Subject: subject,
		Html:    html,
		Text:    text,
	}

	// Marshal to JSON
	jsonData, err := json.Marshal(emailReq)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ JSON: %v", err)
	}

	fmt.Printf("üì§ [RESEND] JSON –¥–∞–Ω–Ω—ã–µ: %s\n", string(jsonData))

	// Create HTTP request
	req, err := http.NewRequest("POST", "https://api.resend.com/emails", bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	// Set headers
	req.Header.Set("Authorization", "Bearer "+s.apiKey)
	req.Header.Set("Content-Type", "application/json")

	// Send request
	client := &http.Client{Timeout: 30 * time.Second}
	fmt.Printf("üöÄ [RESEND] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...\n")

	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	// Read response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	fmt.Printf("üìä [RESEND] Status Code: %d\n", resp.StatusCode)
	fmt.Printf("üìÑ [RESEND] Response Body: %s\n", string(body))

	// Check status
	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var emailResp ResendEmailResponse
		if err := json.Unmarshal(body, &emailResp); err == nil {
			fmt.Printf("‚úÖ [RESEND] –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: %s\n", emailResp.Id)
		} else {
			fmt.Printf("‚úÖ [RESEND] –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n")
		}
		return nil
	} else {
		return fmt.Errorf("Resend error %d: %s", resp.StatusCode, string(body))
	}
}

func getFirstChars(s string, n int) string {
	if len(s) <= n {
		return s
	}
	return s[:n] + "..."
}
