package middleware

import (
	"auth-service/internal/utils"
	"fmt"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
)

func AuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		fmt.Printf("üéØ –î–ï–ë–ê–ì AuthMiddleware - Authorization header: '%s'\n", authHeader)

		if authHeader == "" {
			fmt.Printf("‚ùå –î–ï–ë–ê–ì AuthMiddleware - Authorization header is empty\n")
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
			})
			c.Abort()
			return
		}

		accessToken := strings.Replace(authHeader, "Bearer ", "", 1)
		fmt.Printf("üéØ –î–ï–ë–ê–ì AuthMiddleware - Extracted token: '%s...'\n", accessToken[:50])

		if accessToken == "" {
			fmt.Printf("‚ùå –î–ï–ë–ê–ì AuthMiddleware - Token is empty after extraction\n")
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞",
			})
			c.Abort()
			return
		}

		fmt.Printf("üéØ –î–ï–ë–ê–ì AuthMiddleware - Validating token...\n")
		claims, err := utils.ValidateToken(accessToken)
		if err != nil {
			fmt.Printf("‚ùå –î–ï–ë–ê–ì AuthMiddleware - Token validation FAILED: %v\n", err)
			fmt.Printf("‚ùå –î–ï–ë–ê–ì AuthMiddleware - Error details: %+v\n", err)
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: " + err.Error(),
			})
			c.Abort()
			return
		}

		fmt.Printf("‚úÖ –î–ï–ë–ê–ì AuthMiddleware - Token validation SUCCESS\n")
		fmt.Printf("‚úÖ –î–ï–ë–ê–ì AuthMiddleware - UserID: %d, Email: %s, Role: %s\n",
			claims.UserID, claims.Email, claims.Role)

		c.Set("user_id", claims.UserID)
		c.Set("user_email", claims.Email)
		c.Set("user_role", claims.Role)

		fmt.Printf("‚úÖ –î–ï–ë–ê–ì AuthMiddleware - Context set, proceeding to handler\n")
		c.Next()
	}
}
