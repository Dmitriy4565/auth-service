#!/usr/bin/env python3
import paramiko
import os
import tarfile

def deploy():
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        ssh.connect('77.110.105.228', username='root', password='WFdYPuq0Dyef')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞
        print("üì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
        with tarfile.open('project.tar.gz', 'w:gz') as tar:
            for item in ['cmd', 'internal', 'migrations', 'pkg', 'go.mod', 'go.sum', 'docker-compose.yml', 'Dockerfile']:
                if os.path.exists(item):
                    tar.add(item)
        
        # –ó–∞–ª–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        print("üì§ –ó–∞–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        sftp = ssh.open_sftp()
        sftp.put('project.tar.gz', '/tmp/project.tar.gz')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)
        print("üê≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker...")
        docker_commands = [
            'apt remove -y docker docker-engine docker.io containerd runc || true',
            'apt update',
            'apt install -y apt-transport-https ca-certificates curl gnupg lsb-release',
            'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg',
            'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null',
            'apt update',
            'apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin',
            'docker --version',
            'docker compose version'
        ]
        
        for cmd in docker_commands:
            print(f"‚ñ∂Ô∏è  –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
            stdin, stdout, stderr = ssh.exec_command(cmd)
            output = stdout.read().decode()
            error = stderr.read().decode()
            if output:
                print(f"üìã {output.strip()}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        app_commands = [
            'mkdir -p /opt/auth-service',
            'cd /opt/auth-service && tar -xzf /tmp/project.tar.gz',
            'cd /opt/auth-service && docker compose down || true',
            'cd /opt/auth-service && docker compose up -d --build',
            'sleep 20'  # –ñ–¥–µ–º –ø–æ–∫–∞ –≤—Å–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
        ]
        
        for cmd in app_commands:
            print(f"‚ñ∂Ô∏è  –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
            stdin, stdout, stderr = ssh.exec_command(cmd)
            output = stdout.read().decode()
            error = stderr.read().decode()
            if output:
                print(f"üìã {output.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤...")
        stdin, stdout, stderr = ssh.exec_command('cd /opt/auth-service && docker compose ps')
        status = stdout.read().decode()
        print(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:\n{status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        stdin, stdout, stderr = ssh.exec_command('cd /opt/auth-service && docker compose logs auth-service')
        logs = stdout.read().decode()
        print(f"üìù –õ–æ–≥–∏:\n{logs[-500:]}")  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        
        print("üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://77.110.105.228:8080")
        print("üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: 77.110.105.228:5432")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        ssh.close()
        if os.path.exists('project.tar.gz'):
            os.remove('project.tar.gz')

if __name__ == "__main__":
    deploy()